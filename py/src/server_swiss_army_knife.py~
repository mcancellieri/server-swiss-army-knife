#!/usr/bin/python

import sys
from PyQt4 import *
from PyQt4 import QtCore
from PyQt4 import QtGui
from PyQt4.QtCore import *
from PyQt4.QtGui import *
import os
import plugin_loader as plugin_loader

class Gui(QWidget):
    READY_MESSAGE='Ready for your ctrl+v'
    SEARCH_PLACEHOLDER='Search here'
	
    def eventFilter(self,sender,event):
        if (event.type() == QtCore.QEvent.KeyPress):
            print(event.type())
            if (event.matches(QtGui.QKeySequence.Paste)):
                    buttonText = self.choosedType
                    converter = self.searchConverter(buttonText)                       
                    text = self.clipboard.text().toAscii()
                    self.textArea.clear()
                    try:
                        output = converter.convert(self,text)
                        self.cursor.insertText((output))
                        self.update_status(self.READY_MESSAGE,False)
                    except Exception as ex:
                        self.update_status(ex,True)
                    return True
        return False

    def searchConverter(self, buttonText):
	print (self.plugins)
	for p in plugin_loader.getPlugins():
	    plugin = plugin_loader.loadPlugin(p)
	    print (plugin.getName(self))
	    if plugin.getName(self) == buttonText:
	        return plugin

    
    def toggle_function(self, pressed):
        source = self.sender()
        print source.text()
        if pressed:
            val = 255
        else: val = 0

        for button in self.button:
            if button.text()!=source.text():
                button.setChecked(False)

        self.choosedType=str(source.text())


    def setup_button(self, button, index, tooltip):
         button.setCheckable(True)
         button.clicked[bool].connect(self.toggle_function)
         button.resize(100, button.height())         
         button.move(100 * (index)+5,0)
	 button.setToolTip(tooltip)
    
    def update_status(self, message, is_error):
        print message
        if is_error:
            errorPalette = QtGui.QPalette()
            errorPalette.setColor(QtGui.QPalette.Foreground,QtCore.Qt.red)
            self.status.setPalette(errorPalette)
        else:
            normalPalette = QtGui.QPalette()
            normalPalette.setColor(QtGui.QPalette.Foreground,QtCore.Qt.black)
            self.status.setPalette(normalPalette)     
        self.status.setText(str(message))
        

    def highLightText(self, text):
        cursor = self.cursor
        
        # Setup the desired format for matches
        format = QtGui.QTextCharFormat()
        format.setBackground(QtGui.QBrush(QtGui.QColor("yellow")))
        plain_format = QtGui.QTextCharFormat()
        plain_format.setBackground(QtGui.QBrush(QtGui.QColor("white")))
        cursor.select(QtGui.QTextCursor.Document)
        cursor.mergeCharFormat(plain_format)
        if text=='':
            return
        cursor.setPosition(0)
        cursor.mergeCharFormat(format)
        # Setup the regex engine
        pattern = self.searchBox.text()
        regex = QtCore.QRegExp(pattern)
        # Process the displayed document
        pos = 0
        index = regex.indexIn(self.textArea.toPlainText(), pos)
        while (index != -1):
            print index
            # Select the matched text and apply the desired format
            cursor.setPosition(index)
            pos = len(pattern)
            while pos > 0:
                cursor.movePosition(QtGui.QTextCursor.Right, 1)
                pos-=1
            cursor.mergeCharFormat(format)
            # Move to the next match
            pos = index + regex.matchedLength()
            index = regex.indexIn(self.textArea.toPlainText(), pos)



    def __init__(self):
        QWidget.__init__(self, parent=None)
        screen = QDesktopWidget().screenGeometry()
        self.setWindowTitle('server-swiss-army-knife')
        self.setWindowIcon( QtGui.QIcon ( '../res/icon.png' ))
        self.resize(screen.width(), screen.height()/2 +50)
        self.move((screen.width()/2 - self.geometry().width()) / 2, 0)
        self.textArea = QTextEdit(self)
        self.textArea.move(0,35)
        self.clipboard = QtGui.QApplication.clipboard()
        self.textArea.resize(screen.width(), screen.height()/2)
        self.cursor = QTextCursor(self.textArea.document())
        self.textArea.installEventFilter(self)
        self.button = []
        i = 0
        self.plugins = []
        for p in plugin_loader.getPlugins():
            plugin = plugin_loader.loadPlugin(p)
            self.button.append(QtGui.QPushButton(plugin.getName(self), self))
            self.setup_button(self.button[i], i, plugin.getDescription(self))
            i+=1
        if len(self.button) > 0:
            self.choosedType = self.button[0].text()
            self.button[0].setChecked(True)
        self.searchBox = QLineEdit(self)
        self.searchBox.textChanged.connect(self.highLightText)
        self.searchBox.setPlaceholderText(self.SEARCH_PLACEHOLDER)
        self.searchBox.resize(150, 25)
        self.searchBox.move(self.width()-155, 5)
        self.status = QLabel(self.READY_MESSAGE,self)
        self.status.resize(self.width(),15)
        self.status.move(5, self.height()-15)
        self.show()
        self.cursor.insertText("")

class Main(QMainWindow):
	def __init__(self):
		QMainWindow.__init__(self, parent=None)
		self.gui = Gui()
        



app = QtGui.QApplication(sys.argv)
app.setWindowIcon( QtGui.QIcon ( '../res/icon.png' ))
window = Main()
sys.exit(app.exec_())
